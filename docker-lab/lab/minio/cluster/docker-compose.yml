version: '3.7'

# configuration source https://github.com/minio/minio/blob/master/docs/orchestration/docker-compose/docker-compose.yaml

networks:
  minio_cluster_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.80.0.0/24
          gateway: 172.80.0.1

# Settings and configurations that are common for all containers
x-minio-common: &minio-common
  image: minio/minio:latest
  command: server --console-address ":9001" --address ":80" http://minio{1...4}/data{1...2}
  restart: unless-stopped
  expose:
    - "${MINIO_ADDRESS_PORT:-80}"
    - "${MINIO_CONSOLE_PORT:-9001}"
  environment:
    MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
    MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    MINIO_PROMETHEUS_URL: ${MINIO_PROMETHEUS_URL:-http://prometheus.devops:9090}
    MINIO_PROMETHEUS_AUTH_TYPE: ${MINIO_PROMETHEUS_AUTH_TYPE:-public}
    MINIO_DISTRIBUTED_MODE_ENABLED: yes
    MINIO_DISTRIBUTED_NODES: minio1,minio2,minio3,minio4
    #MINIO_ACCESS_KEY: AKIAIOSFODNN7EXAMPLE
    #MINIO_SECRET_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    #MINIO_CACHE: "on"
    #MINIO_CACHE_DRIVES: /mnt/drive1,/mnt/drive2
    #MINIO_CACHE_QUOTA: 80 # 80% of the drive will be used for caching
    #MINIO_CACHE_AFTER: 1 # Object will be cached after the first request to it
    #MINIO_CACHE_WATERMARK_LOW: 70 # Least accessed objects will be erased after the cache disk reaches the 70% watermark
    #MINIO_CACHE_WATERMARK_HIGH: 90
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:80/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

# starts 4 docker containers running minio server instances.
# using nginx reverse proxy, load balancing, you can access
# it through port 80.
services:
  minio1:
    <<: *minio-common
    hostname: minio1
    container_name: minio1
    ports:
      - "9002:80"
      - "9006:9001"
    volumes:
      - minio-data1-1:/data1
      - minio-data1-2:/data2
    networks:
      minio_cluster_net:
        ipv4_address: 172.80.0.2

  minio2:
    <<: *minio-common
    hostname: minio2
    container_name: minio2
    ports:
      - "9003:80"
      - "9007:9001"
    volumes:
      - minio-data2-1:/data1
      - minio-data2-2:/data2
    networks:
      minio_cluster_net:
        ipv4_address: 172.80.0.3

  minio3:
    <<: *minio-common
    hostname: minio3
    container_name: minio3
    ports:
      - "9004:80"
      - "9008:9001"
    volumes:
      - minio-data3-1:/data1
      - minio-data3-2:/data2
    networks:
      minio_cluster_net:
        ipv4_address: 172.80.0.4

  minio4:
    <<: *minio-common
    hostname: minio4
    container_name: minio4
    ports:
      - "9005:80"
      - "9009:9001"
    volumes:
      - minio-data4-1:/data1
      - minio-data4-2:/data2
    networks:
      minio_cluster_net:
        ipv4_address: 172.80.0.5

  # nginx reverse proxy, load balancing as master node
  minio_nginx:
    image: nginx:1.25.3-alpine
    container_name: minio-nginx
    restart: always
    ports:
      - 9000:80/tcp
      - 9001:80/tcp
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/minio.conf:/etc/nginx/conf.d/default.conf:ro
    links:
      - minio1
      - minio2
      - minio3
      - minio4
    networks:
      minio_cluster_net:
        ipv4_address: 172.80.0.6


## By default this config uses default local driver,
## For custom volumes replace with volume driver configuration.
volumes:
  minio-data1-1: {}
  minio-data1-2: {}
  minio-data2-1: {}
  minio-data2-2: {}
  minio-data3-1: {}
  minio-data3-2: {}
  minio-data4-1: {}
  minio-data4-2: {}